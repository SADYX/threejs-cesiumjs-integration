define(["exports","./Matrix3-81054f0f","./defaultValue-f6d5e6da","./Math-2ce22ee9"],function(t,i,e,a){"use strict";function n(t,i,e){if(0===t)return i*e;let a=t*t,n=a*a,s=n*a,h=s*a,u=h*a,l=u*a;return i*((1-a/4-3*n/64-5*s/256-175*h/16384-441*u/65536-4851*l/1048576)*e-(3*a/8+3*n/32+45*s/1024+105*h/4096+2205*u/131072+6237*l/524288)*Math.sin(2*e)+(15*n/256+45*s/1024+525*h/16384+1575*u/65536+155925*l/8388608)*Math.sin(4*e)-(35*s/3072+175*h/12288+3675*u/262144+13475*l/1048576)*Math.sin(6*e)+(315*h/131072+2205*u/524288+43659*l/8388608)*Math.sin(8*e)-(693*u/1310720+6237*l/5242880)*Math.sin(10*e)+1001*l/8388608*Math.sin(12*e))}function s(t,i){if(0===t)return Math.log(Math.tan(.5*(a.CesiumMath.PI_OVER_TWO+i)));let e=t*Math.sin(i);return Math.log(Math.tan(.5*(a.CesiumMath.PI_OVER_TWO+i)))-t/2*Math.log((1+e)/(1-e))}let h=new i.Cartesian3,u=new i.Cartesian3;function l(t,e,l,o){i.Cartesian3.normalize(o.cartographicToCartesian(e,u),h),i.Cartesian3.normalize(o.cartographicToCartesian(l,u),u);let r=o.maximumRadius,d=o.minimumRadius,M=r*r;t._ellipticitySquared=(M-d*d)/M,t._ellipticity=Math.sqrt(t._ellipticitySquared),t._start=i.Cartographic.clone(e,t._start),t._start.height=0,t._end=i.Cartographic.clone(l,t._end),t._end.height=0,t._heading=function(t,i,e,n,h){let u=s(t._ellipticity,e),l=s(t._ellipticity,h);return Math.atan2(a.CesiumMath.negativePiToPi(n-i),l-u)}(t,e.longitude,e.latitude,l.longitude,l.latitude),t._distance=function(t,i,e,s,h,u,l){let o=t._heading,r=u-s,d=0;if(a.CesiumMath.equalsEpsilon(Math.abs(o),a.CesiumMath.PI_OVER_TWO,a.CesiumMath.EPSILON8)){if(i===e)d=i*Math.cos(h)*a.CesiumMath.negativePiToPi(r);else{let e=Math.sin(h);d=i*Math.cos(h)*a.CesiumMath.negativePiToPi(r)/Math.sqrt(1-t._ellipticitySquared*e*e)}}else{let e=n(t._ellipticity,i,h);d=(n(t._ellipticity,i,l)-e)/Math.cos(o)}return Math.abs(d)}(t,o.maximumRadius,o.minimumRadius,e.longitude,e.latitude,l.longitude,l.latitude)}function o(t,h,u,l,o,r){let d,M,c;if(0===u)return i.Cartographic.clone(t,r);if(Math.abs(a.CesiumMath.PI_OVER_TWO-Math.abs(h))>a.CesiumMath.EPSILON8){M=function(t,i,e){let a=t/e;if(0===i)return a;let n=a*a,s=n*a,h=s*a,u=i*i,l=u*u,o=l*u,r=o*u,d=r*u,M=d*u;return a+a*u/4+7*a*l/64+15*a*o/256+579*a*r/16384+1515*a*d/65536+16837*a*M/1048576+(3*a*l/16+45*a*o/256-a*(32*n-561)*r/4096-a*(232*n-1677)*d/16384+a*(399985-90560*n+512*h)*M/5242880)*Math.cos(2*a)+(21*a*o/256+483*a*r/4096-a*(224*n-1969)*d/16384-a*(33152*n-112599)*M/1048576)*Math.cos(4*a)+(151*a*r/4096+4681*a*d/65536+1479*a*M/16384-453*s*M/32768)*Math.cos(6*a)+(1097*a*d/65536+42783*a*M/1048576)*Math.cos(8*a)+8011*a*M/1048576*Math.cos(10*a)+(3*u/8+3*l/16+213*o/2048-3*n*o/64+255*r/4096-33*n*r/512+20861*d/524288-33*n*d/512+h*d/1024+28273*M/1048576-471*n*M/8192+9*h*M/4096)*Math.sin(2*a)+(21*l/256+21*o/256+533*r/8192-21*n*r/512+197*d/4096-315*n*d/4096+584039*M/16777216-12517*n*M/131072+7*h*M/2048)*Math.sin(4*a)+(151*o/6144+151*r/4096+5019*d/131072-453*n*d/16384+26965*M/786432-8607*n*M/131072)*Math.sin(6*a)+(1097*r/131072+1097*d/65536+225797*M/10485760-1097*n*M/65536)*Math.sin(8*a)+(8011*d/2621440+8011*M/1048576)*Math.sin(10*a)+293393*M/251658240*Math.sin(12*a)}(n(o,l,t.latitude)+u*Math.cos(h),o,l);let i=s(o,t.latitude),e=s(o,M);c=Math.tan(h)*(e-i),d=a.CesiumMath.negativePiToPi(t.longitude+c)}else{let i;if(M=t.latitude,0===o)i=l*Math.cos(t.latitude);else{let e=Math.sin(t.latitude);i=l*Math.cos(t.latitude)/Math.sqrt(1-o*o*e*e)}c=u/i,d=h>0?a.CesiumMath.negativePiToPi(t.longitude+c):a.CesiumMath.negativePiToPi(t.longitude-c)}return e.defined(r)?(r.longitude=d,r.latitude=M,r.height=0,r):new i.Cartographic(d,M,0)}function r(t,a,n){let s=e.defaultValue(n,i.Ellipsoid.WGS84);this._ellipsoid=s,this._start=new i.Cartographic,this._end=new i.Cartographic,this._heading=void 0,this._distance=void 0,this._ellipticity=void 0,this._ellipticitySquared=void 0,e.defined(t)&&e.defined(a)&&l(this,t,a,s)}Object.defineProperties(r.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},surfaceDistance:{get:function(){return this._distance}},start:{get:function(){return this._start}},end:{get:function(){return this._end}},heading:{get:function(){return this._heading}}}),r.fromStartHeadingDistance=function(t,n,s,h,u){let l=e.defaultValue(h,i.Ellipsoid.WGS84),d=l.maximumRadius,M=l.minimumRadius,c=d*d,g=o(t,n=a.CesiumMath.negativePiToPi(n),s,l.maximumRadius,Math.sqrt((c-M*M)/c));return!e.defined(u)||e.defined(h)&&!h.equals(u.ellipsoid)?new r(t,g,l):(u.setEndPoints(t,g),u)},r.prototype.setEndPoints=function(t,i){l(this,t,i,this._ellipsoid)},r.prototype.interpolateUsingFraction=function(t,i){return this.interpolateUsingSurfaceDistance(t*this._distance,i)},r.prototype.interpolateUsingSurfaceDistance=function(t,i){return o(this._start,this._heading,t,this._ellipsoid.maximumRadius,this._ellipticity,i)},r.prototype.findIntersectionWithLongitude=function(t,n){let s=this._ellipticity,h=this._heading,u=Math.abs(h),l=this._start;if(t=a.CesiumMath.negativePiToPi(t),a.CesiumMath.equalsEpsilon(Math.abs(t),Math.PI,a.CesiumMath.EPSILON14)&&(t=a.CesiumMath.sign(l.longitude)*Math.PI),e.defined(n)||(n=new i.Cartographic),Math.abs(a.CesiumMath.PI_OVER_TWO-u)<=a.CesiumMath.EPSILON8)return n.longitude=t,n.latitude=l.latitude,n.height=0,n;if(a.CesiumMath.equalsEpsilon(Math.abs(a.CesiumMath.PI_OVER_TWO-u),a.CesiumMath.PI_OVER_TWO,a.CesiumMath.EPSILON8)){if(a.CesiumMath.equalsEpsilon(t,l.longitude,a.CesiumMath.EPSILON12))return;return n.longitude=t,n.latitude=a.CesiumMath.PI_OVER_TWO*a.CesiumMath.sign(a.CesiumMath.PI_OVER_TWO-h),n.height=0,n}let o=l.latitude,r=s*Math.sin(o),d=Math.tan(.5*(a.CesiumMath.PI_OVER_TWO+o))*Math.exp((t-l.longitude)/Math.tan(h)),M=(1+r)/(1-r),c,g=l.latitude;do{c=g;let t=s*Math.sin(c),i=(1+t)/(1-t);g=2*Math.atan(d*Math.pow(i/M,s/2))-a.CesiumMath.PI_OVER_TWO}while(!a.CesiumMath.equalsEpsilon(g,c,a.CesiumMath.EPSILON12));return n.longitude=t,n.latitude=g,n.height=0,n},r.prototype.findIntersectionWithLatitude=function(t,n){let h=this._ellipticity,u=this._heading,l=this._start;if(a.CesiumMath.equalsEpsilon(Math.abs(u),a.CesiumMath.PI_OVER_TWO,a.CesiumMath.EPSILON8))return;let o=s(h,l.latitude),r=s(h,t),d=a.CesiumMath.negativePiToPi(l.longitude+Math.tan(u)*(r-o));return e.defined(n)?(n.longitude=d,n.latitude=t,n.height=0,n):new i.Cartographic(d,t,0)},t.EllipsoidRhumbLine=r});