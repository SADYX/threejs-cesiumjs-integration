define(["exports","./Matrix3-81054f0f","./defaultValue-f6d5e6da","./EllipsoidGeodesic-2723ab86","./EllipsoidRhumbLine-77eff028","./IntersectionTests-357c3d7f","./Math-2ce22ee9","./Matrix2-413c4048","./Plane-6add0ae1"],function(e,t,a,i,r,n,l,o,s){"use strict";let c={numberOfPoints:function(e,a,i){let r=t.Cartesian3.distance(e,a);return Math.ceil(r/i)},numberOfPointsRhumbLine:function(e,t,a){let i=Math.pow(e.longitude-t.longitude,2)+Math.pow(e.latitude-t.latitude,2);return Math.max(1,Math.ceil(Math.sqrt(i/(a*a))))}},u=new t.Cartographic;c.extractHeights=function(e,t){let a=e.length,i=Array(a);for(let r=0;r<a;r++){let a=e[r];i[r]=t.cartesianToCartographic(a,u).height}return i};let h=new o.Matrix4,f=new t.Cartesian3,g=new t.Cartesian3,C=new s.Plane(t.Cartesian3.UNIT_X,0),d=new t.Cartesian3,p=new s.Plane(t.Cartesian3.UNIT_X,0),m=new t.Cartesian3,P=new t.Cartesian3,T=[];function y(e,t,a){let i;let r=T;if(r.length=e,t===a){for(i=0;i<e;i++)r[i]=t;return r}let n=(a-t)/e;for(i=0;i<e;i++){let e=t+i*n;r[i]=e}return r}let w=new t.Cartographic,A=new t.Cartographic,E=new t.Cartesian3,M=new t.Cartesian3,R=new t.Cartesian3,b=new i.EllipsoidGeodesic,S=new r.EllipsoidRhumbLine;c.wrapLongitude=function(e,i){let r=[],l=[];if(a.defined(e)&&e.length>0){i=a.defaultValue(i,o.Matrix4.IDENTITY);let c=o.Matrix4.inverseTransformation(i,h),u=o.Matrix4.multiplyByPoint(c,t.Cartesian3.ZERO,f),T=t.Cartesian3.normalize(o.Matrix4.multiplyByPointAsVector(c,t.Cartesian3.UNIT_Y,g),g),y=s.Plane.fromPointNormal(u,T,C),w=t.Cartesian3.normalize(o.Matrix4.multiplyByPointAsVector(c,t.Cartesian3.UNIT_X,d),d),A=s.Plane.fromPointNormal(u,w,p),E=1;r.push(t.Cartesian3.clone(e[0]));let M=r[0],R=e.length;for(let i=1;i<R;++i){let o=e[i];if(0>s.Plane.getPointDistance(A,M)||0>s.Plane.getPointDistance(A,o)){let e=n.IntersectionTests.lineSegmentPlane(M,o,y,m);if(a.defined(e)){let a=t.Cartesian3.multiplyByScalar(T,5e-9,P);0>s.Plane.getPointDistance(y,M)&&t.Cartesian3.negate(a,a),r.push(t.Cartesian3.add(e,a,new t.Cartesian3)),l.push(E+1),t.Cartesian3.negate(a,a),r.push(t.Cartesian3.add(e,a,new t.Cartesian3)),E=1}}r.push(t.Cartesian3.clone(e[i])),E++,M=o}l.push(E)}return{positions:r,lengths:l}},c.generateArc=function(e){a.defined(e)||(e={});let i=e.positions,r=i.length,n=a.defaultValue(e.ellipsoid,t.Ellipsoid.WGS84),o=a.defaultValue(e.height,0),s=Array.isArray(o);if(r<1)return[];if(1===r){let e=n.scaleToGeodeticSurface(i[0],M);if(0!==(o=s?o[0]:o)){let a=n.geodeticSurfaceNormal(e,E);t.Cartesian3.multiplyByScalar(a,o,a),t.Cartesian3.add(e,a,e)}return[e.x,e.y,e.z]}let u=e.minDistance;if(!a.defined(u)){let t=a.defaultValue(e.granularity,l.CesiumMath.RADIANS_PER_DEGREE);u=l.CesiumMath.chordLength(t,n.maximumRadius)}let h,f=0;for(h=0;h<r-1;h++)f+=c.numberOfPoints(i[h],i[h+1],u);let g=3*(f+1),C=Array(g),d=0;for(h=0;h<r-1;h++)d=function(e,a,i,r,n,l,o,s){let u=r.scaleToGeodeticSurface(e,M),h=r.scaleToGeodeticSurface(a,R),f=c.numberOfPoints(e,a,i),g=r.cartesianToCartographic(u,w),C=r.cartesianToCartographic(h,A),d=y(f,n,l);b.setEndPoints(g,C);let p=b.surfaceDistance/f,m=s;g.height=n;let P=r.cartographicToCartesian(g,E);t.Cartesian3.pack(P,o,m),m+=3;for(let e=1;e<f;e++){let a=b.interpolateUsingSurfaceDistance(e*p,A);a.height=d[e],P=r.cartographicToCartesian(a,E),t.Cartesian3.pack(P,o,m),m+=3}return m}(i[h],i[h+1],u,n,s?o[h]:o,s?o[h+1]:o,C,d);T.length=0;let p=i[r-1],m=n.cartesianToCartographic(p,w);m.height=s?o[r-1]:o;let P=n.cartographicToCartesian(m,E);return t.Cartesian3.pack(P,C,g-3),C};let x=new t.Cartographic,D=new t.Cartographic;c.generateRhumbArc=function(e){a.defined(e)||(e={});let i=e.positions,n=i.length,o=a.defaultValue(e.ellipsoid,t.Ellipsoid.WGS84),s=a.defaultValue(e.height,0),u=Array.isArray(s);if(n<1)return[];if(1===n){let e=o.scaleToGeodeticSurface(i[0],M);if(0!==(s=u?s[0]:s)){let a=o.geodeticSurfaceNormal(e,E);t.Cartesian3.multiplyByScalar(a,s,a),t.Cartesian3.add(e,a,e)}return[e.x,e.y,e.z]}let h=a.defaultValue(e.granularity,l.CesiumMath.RADIANS_PER_DEGREE),f,g,C=0,d=o.cartesianToCartographic(i[0],x);for(f=0;f<n-1;f++)g=o.cartesianToCartographic(i[f+1],D),C+=c.numberOfPointsRhumbLine(d,g,h),d=t.Cartographic.clone(g,x);let p=3*(C+1),m=Array(p),P=0;for(f=0;f<n-1;f++)P=function(e,a,i,n,l,o,s,u){let h=n.cartesianToCartographic(e,w),f=n.cartesianToCartographic(a,A),g=c.numberOfPointsRhumbLine(h,f,i);h.height=0,f.height=0;let C=y(g,l,o);S.ellipsoid.equals(n)||(S=new r.EllipsoidRhumbLine(void 0,void 0,n)),S.setEndPoints(h,f);let d=S.surfaceDistance/g,p=u;h.height=l;let m=n.cartographicToCartesian(h,E);t.Cartesian3.pack(m,s,p),p+=3;for(let e=1;e<g;e++){let a=S.interpolateUsingSurfaceDistance(e*d,A);a.height=C[e],m=n.cartographicToCartesian(a,E),t.Cartesian3.pack(m,s,p),p+=3}return p}(i[f],i[f+1],h,o,u?s[f]:s,u?s[f+1]:s,m,P);T.length=0;let R=i[n-1],b=o.cartesianToCartographic(R,w);b.height=u?s[n-1]:s;let N=o.cartographicToCartesian(b,E);return t.Cartesian3.pack(N,m,p-3),m},c.generateCartesianArc=function(e){let a=c.generateArc(e),i=a.length/3,r=Array(i);for(let e=0;e<i;e++)r[e]=t.Cartesian3.unpack(a,3*e);return r},c.generateCartesianRhumbArc=function(e){let a=c.generateRhumbArc(e),i=a.length/3,r=Array(i);for(let e=0;e<i;e++)r[e]=t.Cartesian3.unpack(a,3*e);return r},e.PolylinePipeline=c});