define(["./defaultValue-f6d5e6da","./Matrix3-81054f0f","./Transforms-fce95115","./ComponentDatatype-ab629b88","./GeometryAttribute-81ff775c","./GeometryAttributes-1e4ddcd2","./IndexDatatype-d3db4e7d","./Math-2ce22ee9","./WallGeometryLibrary-1c767084","./Matrix2-413c4048","./RuntimeError-9b4ce3fb","./combine-0c102d93","./WebGLConstants-7f557f93","./arrayRemoveDuplicates-9b636830","./PolylinePipeline-8495667b","./EllipsoidGeodesic-2723ab86","./EllipsoidRhumbLine-77eff028","./IntersectionTests-357c3d7f","./Plane-6add0ae1"],function(e,i,t,n,a,l,r,o,s,d,m,u,p,f,c,h,g,y,_){"use strict";let E=new i.Cartesian3,b=new i.Cartesian3;function C(t){let n=(t=e.defaultValue(t,e.defaultValue.EMPTY_OBJECT)).positions,a=t.maximumHeights,l=t.minimumHeights,r=e.defaultValue(t.granularity,o.CesiumMath.RADIANS_PER_DEGREE),s=e.defaultValue(t.ellipsoid,i.Ellipsoid.WGS84);this._positions=n,this._minimumHeights=l,this._maximumHeights=a,this._granularity=r,this._ellipsoid=i.Ellipsoid.clone(s),this._workerName="createWallOutlineGeometry";let d=1+n.length*i.Cartesian3.packedLength+2;e.defined(l)&&(d+=l.length),e.defined(a)&&(d+=a.length),this.packedLength=d+i.Ellipsoid.packedLength+1}C.pack=function(t,n,a){let l;a=e.defaultValue(a,0);let r=t._positions,o=r.length;for(n[a++]=o,l=0;l<o;++l,a+=i.Cartesian3.packedLength)i.Cartesian3.pack(r[l],n,a);let s=t._minimumHeights;if(o=e.defined(s)?s.length:0,n[a++]=o,e.defined(s))for(l=0;l<o;++l)n[a++]=s[l];let d=t._maximumHeights;if(o=e.defined(d)?d.length:0,n[a++]=o,e.defined(d))for(l=0;l<o;++l)n[a++]=d[l];return i.Ellipsoid.pack(t._ellipsoid,n,a),n[a+=i.Ellipsoid.packedLength]=t._granularity,n};let H=i.Ellipsoid.clone(i.Ellipsoid.UNIT_SPHERE),A={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:H,granularity:void 0};return C.unpack=function(t,n,a){let l,r,o;n=e.defaultValue(n,0);let s=t[n++],d=Array(s);for(l=0;l<s;++l,n+=i.Cartesian3.packedLength)d[l]=i.Cartesian3.unpack(t,n);if((s=t[n++])>0)for(r=Array(s),l=0;l<s;++l)r[l]=t[n++];if((s=t[n++])>0)for(o=Array(s),l=0;l<s;++l)o[l]=t[n++];let m=i.Ellipsoid.unpack(t,n,H),u=t[n+=i.Ellipsoid.packedLength];return e.defined(a)?(a._positions=d,a._minimumHeights=r,a._maximumHeights=o,a._ellipsoid=i.Ellipsoid.clone(m,a._ellipsoid),a._granularity=u,a):(A.positions=d,A.minimumHeights=r,A.maximumHeights=o,A.granularity=u,new C(A))},C.fromConstantHeights=function(i){let t,n;let a=(i=e.defaultValue(i,e.defaultValue.EMPTY_OBJECT)).positions,l=i.minimumHeight,r=i.maximumHeight,o=e.defined(l),s=e.defined(r);if(o||s){let e=a.length;t=o?Array(e):void 0,n=s?Array(e):void 0;for(let i=0;i<e;++i)o&&(t[i]=l),s&&(n[i]=r)}return new C({positions:a,maximumHeights:n,minimumHeights:t,ellipsoid:i.ellipsoid})},C.createGeometry=function(d){let m=d._positions,u=d._minimumHeights,p=d._maximumHeights,f=d._granularity,c=d._ellipsoid,h=s.WallGeometryLibrary.computePositions(c,m,p,u,f,!1);if(!e.defined(h))return;let g=h.bottomPositions,y=h.topPositions,_=y.length,C=2*_,H=new Float64Array(C),A,k=0;for(_/=3,A=0;A<_;++A){let e=3*A,t=i.Cartesian3.fromArray(y,e,E),n=i.Cartesian3.fromArray(g,e,b);H[k++]=n.x,H[k++]=n.y,H[k++]=n.z,H[k++]=t.x,H[k++]=t.y,H[k++]=t.z}let x=new l.GeometryAttributes({position:new a.GeometryAttribute({componentDatatype:n.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:H})}),G=C/3;C=2*G-4+G;let L=r.IndexDatatype.createTypedArray(G,C),P=0;for(A=0;A<G-2;A+=2){let e=A,t=A+2,n=i.Cartesian3.fromArray(H,3*e,E),a=i.Cartesian3.fromArray(H,3*t,b);if(i.Cartesian3.equalsEpsilon(n,a,o.CesiumMath.EPSILON10))continue;let l=A+1,r=A+3;L[P++]=l,L[P++]=e,L[P++]=l,L[P++]=r,L[P++]=e,L[P++]=t}return L[P++]=G-2,L[P++]=G-1,new a.Geometry({attributes:x,indices:L,primitiveType:a.PrimitiveType.LINES,boundingSphere:new t.BoundingSphere.fromVertices(H)})},function(t,n){return e.defined(n)&&(t=C.unpack(t,n)),t._ellipsoid=i.Ellipsoid.clone(t._ellipsoid),C.createGeometry(t)}});